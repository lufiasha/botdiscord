# main.py
import os
import random
import psycopg2
from urllib.parse import urlparse
from flask import Flask, request, jsonify
from discord_interactions import verify_key_decorator, InteractionType, InteractionResponseType

app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Discord ===
DISCORD_PUBLIC_KEY = os.getenv("DISCORD_PUBLIC_KEY")
if not DISCORD_PUBLIC_KEY:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DISCORD_PUBLIC_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ===
def get_db_connection():
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render")
    url = urlparse(db_url)
    return psycopg2.connect(
        host=url.hostname,
        port=url.port,
        database=url.path[1:],
        user=url.username,
        password=url.password
    )

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS players (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        cycle INT DEFAULT 1,
        sanity INT DEFAULT 100,
        max_sanity INT DEFAULT 100,
        memories INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    """)
    conn.commit()
    cur.close()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ players –≥–æ—Ç–æ–≤–∞")

# === –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ ===
def get_or_create_player(user_id, username):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "SELECT user_id, cycle, sanity, max_sanity, memories FROM players WHERE user_id = %s",
        (user_id,)
    )
    row = cur.fetchone()
    if row:
        player = {
            "user_id": row[0],
            "cycle": row[1],
            "sanity": row[2],
            "max_sanity": row[3],
            "memories": row[4]
        }
    else:
        cur.execute(
            """INSERT INTO players (user_id, username)
               VALUES (%s, %s)
               RETURNING user_id, cycle, sanity, max_sanity, memories""",
            (user_id, username)
        )
        row = cur.fetchone()
        player = {
            "user_id": row[0],
            "cycle": row[1],
            "sanity": row[2],
            "max_sanity": row[3],
            "memories": row[4]
        }
    conn.commit()
    cur.close()
    conn.close()
    return player

# === –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ===
def update_player(user_id, sanity=None, memories=None, cycle=None, max_sanity=None):
    updates = []
    values = []
    if sanity is not None:
        updates.append("sanity = %s")
        values.append(max(0, sanity))
    if memories is not None:
        updates.append("memories = %s")
        values.append(memories)
    if cycle is not None:
        updates.append("cycle = %s")
        values.append(cycle)
    if max_sanity is not None:
        updates.append("max_sanity = %s")
        values.append(max_sanity)
    if not updates:
        return
    values.append(user_id)
    query = f"UPDATE players SET {', '.join(updates)}, updated_at = NOW() WHERE user_id = %s"
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query, values)
    conn.commit()
    cur.close()
    conn.close()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
with app.app_context():
    init_db()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Discord ===
@app.route('/interactions', methods=['POST'])
@verify_key_decorator(DISCORD_PUBLIC_KEY)
def interactions():
    data = request.json
    if data['type'] == InteractionType.APPLICATION_COMMAND:
        command_name = data['data']['name']
        user_id = int(data['member']['user']['id'])
        username = data['member']['user']['username']

        player = get_or_create_player(user_id, username)

        if command_name == "awaken":
            msg = (
                f"üåÄ –¶–∏–∫–ª #{player['cycle']}\n"
                f"üß† –†–∞—Å—Å—É–¥–æ–∫: {player['sanity']}/{player['max_sanity']}\n"
                f"üìú –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {player['memories']}\n\n"
                "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ –ø–æ–¥–≤–∞–ª–µ. –°—Ç–µ–Ω—ã –¥—ã—à–∞—Ç. –ß—Ç–æ –¥–∞–ª—å—à–µ?"
            )

        elif command_name == "explore":
            if player['sanity'] <= 0:
                msg = "–¢—ã –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è... –ò—Å–ø–æ–ª—å–∑—É–π `/awaken`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ü–∏–∫–ª –∑–∞–Ω–æ–≤–æ."
            else:
                events = [
                    {"text": "–¢—ã –Ω–∞—à—ë–ª –æ–±—Ä—ã–≤–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞! +2 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.", "memories": 2},
                    {"text": "–°—Ç–µ–Ω—ã —à–µ–ø—á—É—Ç... ‚àí10 —Ä–∞—Å—Å—É–¥–∫–∞.", "sanity": -10},
                    {"text": "–í —É–≥–ª—É ‚Äî —Å—Ç—Ä–∞–Ω–Ω—ã–π –∞–º—É–ª–µ—Ç. +5 –∫ –º–∞–∫—Å. —Ä–∞—Å—Å—É–¥–∫—É!", "max_sanity": 5},
                    {"text": "–¢—ã –≤—Å–ø–æ–º–Ω–∏–ª –ª–∏—Ü–æ –º–∞—Ç–µ—Ä–∏... +5 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, –Ω–æ –±–æ–ª—å–Ω–æ. ‚àí15 —Ä–∞—Å—Å—É–¥–∫–∞.", "memories": 5, "sanity": -15}
                ]
                event = random.choice(events)
                new_san = player['sanity'] + event.get("sanity", 0)
                new_mem = player['memories'] + event.get("memories", 0)
                new_max = player['max_sanity'] + event.get("max_sanity", 0)

                update_player(
                    user_id,
                    sanity=new_san,
                    memories=new_mem,
                    max_sanity=new_max if "max_sanity" in event else None
                )
                msg = event["text"]

        elif command_name == "rest":
            if player['sanity'] >= player['max_sanity']:
                msg = "–¢—ã –æ—Ç–¥–æ—Ö–Ω—É–ª... –Ω–æ —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ."
            else:
                healed = min(20, player['max_sanity'] - player['sanity'])
                update_player(user_id, sanity=player['sanity'] + healed)
                msg = f"üïØÔ∏è –¢—ã –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É–ª. +{healed} —Ä–∞—Å—Å—É–¥–∫–∞."

        else:
            msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

        return jsonify({
            'type': InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
            'data': {'content': msg}
        })

    return jsonify({'type': InteractionResponseType.PONG})

# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ if __name__ == '__main__' –¥–ª—è Render) ===
port = int(os.environ.get('PORT', 10000))
app.run(host='0.0.0.0', port=port)
