# main.py
import os
import random
import psycopg2
from urllib.parse import urlparse
from flask import Flask, request, jsonify
from discord_interactions import verify_key_decorator, InteractionType, InteractionResponseType
from datetime import datetime, timedelta
import traceback

app = Flask(__name__)

DISCORD_PUBLIC_KEY = os.getenv("DISCORD_PUBLIC_KEY", "34d3c6086fed9cb712e1bc84e4b9ea82aa29eeb977815e115659102509a23c31")

if not DISCORD_PUBLIC_KEY:
    raise ValueError("‚ùå DISCORD_PUBLIC_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")

# === –ü—Ä–µ–¥–º–µ—Ç—ã ===
ITEMS = {
    "rusty_sword": {"name": "–†–∂–∞–≤—ã–π –º–µ—á", "type": "weapon", "attack": 5},
    "iron_sword": {"name": "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á", "type": "weapon", "attack": 12},
    "steel_blade": {"name": "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª–∏–Ω–æ–∫", "type": "weapon", "attack": 20},
    "leather_armor": {"name": "–ö–æ–∂–∞–Ω—ã–π –¥–æ—Å–ø–µ—Ö", "type": "armor", "defense": 3},
    "iron_armor": {"name": "–ñ–µ–ª–µ–∑–Ω—ã–π –¥–æ—Å–ø–µ—Ö", "type": "armor", "defense": 8},
    "obsidian_plate": {"name": "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è –±—Ä–æ–Ω—è", "type": "armor", "defense": 15},
    "healing_herb": {"name": "–¶–µ–ª–µ–±–Ω–∞—è —Ç—Ä–∞–≤–∞", "type": "consumable", "effect": "heal_20"},
    "loot_box": {"name": "–Ø—â–∏–∫ —Å –¥–æ–±—ã—á–µ–π", "type": "box", "description": "–°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"}
}

MOBS = [
    {"name": "–¢–µ–Ω–µ–≤–æ–π –°—Ç—Ä–∞–∂", "xp": 15, "gold": 3, "drops": ["rusty_sword"]},
    {"name": "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ü–æ—Ä–æ–≥–∞", "xp": 30, "gold": 8, "drops": ["iron_sword", "leather_armor"]}
]

BOSSES = [
    {"name": "–≠—Ö–æ –¢—ã", "level_req": 1, "xp": 100, "gold": 25, "drops": ["iron_sword", "loot_box"], "cooldown_min": 15},
    {"name": "–°—Ç—Ä–∞–∂ –í—Ä–µ–º–µ–Ω–∏", "level_req": 5, "xp": 250, "gold": 60, "drops": ["steel_blade", "iron_armor", "loot_box"], "cooldown_min": 25},
    {"name": "–¢–µ–Ω—å –ê–∫–∞–¥–µ–º–∏–∏", "level_req": 10, "xp": 500, "gold": 120, "drops": ["obsidian_plate", "loot_box"], "cooldown_min": 35},
    {"name": "–¶–∏–∫–ª–æ–ø", "level_req": 15, "xp": 1000, "gold": 250, "drops": ["obsidian_plate", "steel_blade", "loot_box"], "cooldown_min": 45}
]

def get_db():
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise ValueError("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Render")
    url = urlparse(db_url)
    return psycopg2.connect(
        host=url.hostname,
        port=url.port,
        database=url.path[1:],
        user=url.username,
        password=url.password
    )

def init_db():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS players (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        level INT DEFAULT 1,
        xp INT DEFAULT 0,
        gold INT DEFAULT 0,
        sanity INT DEFAULT 100,
        max_sanity INT DEFAULT 100,
        last_meditation TIMESTAMP,
        last_boss_fight TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    CREATE TABLE IF NOT EXISTS inventory (
        user_id BIGINT,
        item_id TEXT,
        count INT DEFAULT 1,
        PRIMARY KEY (user_id, item_id)
    );
    CREATE TABLE IF NOT EXISTS equipment (
        user_id BIGINT PRIMARY KEY,
        weapon TEXT,
        armor TEXT
    );
    """)
    conn.commit()
    cur.close()
    conn.close()
    print("‚úÖ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def create_player(user_id, username):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO players (user_id, username) VALUES (%s, %s) ON CONFLICT DO NOTHING;
        INSERT INTO equipment (user_id) VALUES (%s) ON CONFLICT DO NOTHING;
    """, (user_id, username, user_id))
    conn.commit()
    cur.close()
    conn.close()

def get_player(user_id):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM players WHERE user_id = %s", (user_id,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    if not row:
        return None
    return {
        "user_id": row[0], "username": row[1], "level": row[2], "xp": row[3],
        "gold": row[4], "sanity": row[5], "max_sanity": row[6],
        "last_meditation": row[7], "last_boss_fight": row[8]
    }

def add_item(user_id, item_id, count=1):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO inventory (user_id, item_id, count)
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id, item_id)
        DO UPDATE SET count = inventory.count + %s;
    """, (user_id, item_id, count, count))
    conn.commit()
    cur.close()
    conn.close()

def get_inventory(user_id):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT item_id, count FROM inventory WHERE user_id = %s", (user_id,))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return {row[0]: row[1] for row in rows}

def get_equipment(user_id):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT weapon, armor FROM equipment WHERE user_id = %s", (user_id,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    return {"weapon": row[0], "armor": row[1]} if row else {"weapon": None, "armor": None}

def equip_item(user_id, item_id):
    if item_id not in ITEMS:
        return False
    item = ITEMS[item_id]
    if item["type"] not in ("weapon", "armor"):
        return False
    conn = get_db()
    cur = conn.cursor()
    if item["type"] == "weapon":
        cur.execute("UPDATE equipment SET weapon = %s WHERE user_id = %s", (item_id, user_id))
    elif item["type"] == "armor":
        cur.execute("UPDATE equipment SET armor = %s WHERE user_id = %s", (item_id, user_id))
    conn.commit()
    cur.close()
    conn.close()
    return True

def get_stats(user_id, player=None):
    if player is None:
        player = get_player(user_id)
    equip = get_equipment(user_id)
    base_bonus = player["level"] // 5
    attack = base_bonus + ITEMS.get(equip["weapon"], {}).get("attack", 0)
    defense = base_bonus + ITEMS.get(equip["armor"], {}).get("defense", 0)
    return {"attack": max(1, attack), "defense": max(1, defense)}

@app.route('/interactions', methods=['POST'])
@verify_key_decorator(DISCORD_PUBLIC_KEY)
def interactions():
    print("\n" + "="*50)
    print("üîÑ –ù–û–í–´–ô –ó–ê–ü–†–û–° –û–¢ DISCORD")
    try:
        data = request.json
        print("üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)

        if data['type'] == InteractionType.PING:
            print("üèì –û—Ç–≤–µ—Ç –Ω–∞ PING")
            return jsonify({'type': InteractionResponseType.PONG})

        if data['type'] == InteractionType.APPLICATION_COMMAND:
            cmd = data['data']['name']
            print(f"üí¨ –ö–æ–º–∞–Ω–¥–∞: /{cmd}")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏ username
            if 'member' in data and 'user' in data['member']:
                user_id = int(data['member']['user']['id'])
                username = data['member']['user']['username']
            elif 'user' in data:
                user_id = int(data['user']['id'])
                username = data['user']['username']
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return jsonify({'type': 4, 'data': {'content': "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}})

            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})")

            create_player(user_id, username)
            player = get_player(user_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if cmd == "status":
                stats = get_stats(user_id, player)
                msg = (
                    f"üåÄ {player['username']} | –£—Ä–æ–≤–µ–Ω—å {player['level']}\n"
                    f"üß† –†–∞—Å—Å—É–¥–æ–∫: {player['sanity']}/{player['max_sanity']}\n"
                    f"‚≠ê –û–ø—ã—Ç: {player['xp']} | üí∞ –ó–æ–ª–æ—Ç–æ: {player['gold']}\n"
                    f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {stats['attack']} | üõ° –ó–∞—â–∏—Ç–∞: {stats['defense']}"
                )

            elif cmd == "hunt":
                mob = random.choice(MOBS)
                xp_gain = mob["xp"]
                gold_gain = mob["gold"]
                drop = random.choice(mob["drops"]) if random.random() < 0.3 else None

                conn = get_db()
                cur = conn.cursor()
                cur.execute("UPDATE players SET xp = xp + %s, gold = gold + %s WHERE user_id = %s", (xp_gain, gold_gain, user_id))
                conn.commit()
                cur.close()
                conn.close()

                if drop:
                    add_item(user_id, drop)
                    drop_msg = f"\nüì¶ –î–æ–±—ã—á–∞: {ITEMS[drop]['name']}"
                else:
                    drop_msg = ""
                msg = f"‚öîÔ∏è –£–±–∏—Ç: {mob['name']}\n+{xp_gain} –æ–ø—ã—Ç–∞, +{gold_gain} –∑–æ–ª–æ—Ç–∞{drop_msg}"

            elif cmd == "equip":
                if 'options' not in data['data'] or not data['data']['options']:
                    msg = "–£–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç: `/equip <–Ω–∞–∑–≤–∞–Ω–∏–µ>`"
                else:
                    item_name = data['data']['options'][0]['value']
                    item_id = item_name.lower().replace(" ", "_")
                    if item_id not in ITEMS:
                        msg = "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç."
                    elif equip_item(user_id, item_id):
                        msg = f"‚úÖ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: {ITEMS[item_id]['name']}"
                    else:
                        msg = "–ù–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç."

            elif cmd == "boss":
                now = datetime.utcnow()
                last_fight = player["last_boss_fight"]
                eligible_bosses = [b for b in BOSSES if player["level"] >= b["level_req"]]
                if not eligible_bosses:
                    msg = "–¢—ã –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ –∫ –±–æ—Å—Å–∞–º."
                else:
                    boss = eligible_bosses[-1]
                    if last_fight and now - last_fight < timedelta(minutes=boss["cooldown_min"]):
                        remaining = boss["cooldown_min"] - (now - last_fight).total_seconds() // 60
                        msg = f"–ë–æ—Å—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {int(remaining)} –º–∏–Ω."
                    else:
                        conn = get_db()
                        cur = conn.cursor()
                        cur.execute("UPDATE players SET xp = xp + %s, gold = gold + %s, last_boss_fight = %s WHERE user_id = %s", (boss["xp"], boss["gold"], now, user_id))
                        conn.commit()
                        cur.close()
                        conn.close()

                        drop = None
                        if boss["drops"] and random.random() < 0.7:
                            drop = random.choice(boss["drops"])
                            add_item(user_id, drop)
                        drop_msg = f"\nüî• –î–æ–±—ã—á–∞: {ITEMS[drop]['name']}" if drop else ""
                        msg = f"üíÄ –ü–æ–±–µ–∂–¥—ë–Ω: {boss['name']}\n+{boss['xp']} –æ–ø—ã—Ç–∞, +{boss['gold']} –∑–æ–ª–æ—Ç–∞{drop_msg}"

            elif cmd == "meditate":
                now = datetime.utcnow()
                last = player["last_meditation"]
                if last and now - last < timedelta(hours=1):
                    msg = "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ —á–∞—Å."
                else:
                    conn = get_db()
                    cur = conn.cursor()
                    cur.execute("UPDATE players SET gold = gold + 5, last_meditation = %s WHERE user_id = %s", (now, user_id))
                    conn.commit()
                    cur.close()
                    conn.close()
                    msg = "üïØÔ∏è –¢—ã –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª. +5 –∑–æ–ª–æ—Ç–∞."

            elif cmd == "leaderboard":
                conn = get_db()
                cur = conn.cursor()
                cur.execute("SELECT username, level, xp FROM players ORDER BY xp DESC LIMIT 5")
                rows = cur.fetchall()
                top = "\n".join([f"{i+1}. {r[0]} (—É—Ä. {r[1]}, {r[2]} –æ–ø—ã—Ç–∞)" for i, r in enumerate(rows)])
                cur.close()
                conn.close()
                msg = f"üèÜ –¢–æ–ø –≥–µ—Ä–æ–µ–≤:\n{top}"

            elif cmd == "open":
                inv = get_inventory(user_id)
                if inv.get("loot_box", 0) <= 0:
                    msg = "–£ —Ç–µ–±—è –Ω–µ—Ç —è—â–∏–∫–æ–≤ —Å –¥–æ–±—ã—á–µ–π."
                else:
                    conn = get_db()
                    cur = conn.cursor()
                    cur.execute("UPDATE inventory SET count = count - 1 WHERE user_id = %s AND item_id = 'loot_box'", (user_id,))
                    conn.commit()
                    cur.close()
                    conn.close()

                    reward = random.choice(["rusty_sword", "iron_sword", "leather_armor", "healing_herb"])
                    add_item(user_id, reward)
                    msg = f"üéÅ –¢—ã –æ—Ç–∫—Ä—ã–ª —è—â–∏–∫!\n–ü–æ–ª—É—á–µ–Ω–æ: {ITEMS[reward]['name']}"

            elif cmd == "help":
                msg = (
                    "üìñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ¬´–≠—Ö–æ –¶–∏–∫–ª–∞¬ª**\n\n"
                    "`/status` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                    "`/hunt` ‚Äî –æ—Ö–æ—Ç–∞ –Ω–∞ –º–æ–±–æ–≤\n"
                    "`/boss` ‚Äî —Å—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ—Å—Å–æ–º\n"
                    "`/equip <–ø—Ä–µ–¥–º–µ—Ç>` ‚Äî –Ω–∞–¥–µ—Ç—å –æ—Ä—É–∂–∏–µ/–¥–æ—Å–ø–µ—Ö\n"
                    "`/meditate` ‚Äî –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥\n"
                    "`/open` ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫ —Å –¥–æ–±—ã—á–µ–π\n"
                    "`/leaderboard` ‚Äî —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
                    "–°–æ–±–∏—Ä–∞–π –ø—Ä–µ–¥–º–µ—Ç—ã, —É–ª—É—á—à–∞–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –∏ –Ω–∞–π–¥–∏ –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞."
                )

            else:
                msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ msg ‚Äî —Å—Ç—Ä–æ–∫–∞
            if not isinstance(msg, str):
                msg = "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"

            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {msg[:60]}...")
            return jsonify({'type': 4, 'data': {'content': msg}})

    except Exception as e:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
        traceback.print_exc()
        return jsonify({'type': 4, 'data': {'content': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."}})

    return jsonify({'type': InteractionResponseType.PONG})

with app.app_context():
    init_db()

port = int(os.environ.get('PORT', 10000))
app.run(host='0.0.0.0', port=port)




